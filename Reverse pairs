int team(vector <int> & skill, int n)
{
    // Write your code here.
    int count =0;
    for(int i=0; i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(i<j && skill[i]>2*skill[j])
            {
                count++;
            }
        }
    }
    return count;
}

optimal

int countPairs(vector<int>&skill, int low,int mid,int high)
{
    int count=0;
    int right=mid+1;
    for(int i=low;i<=mid;i++)
    {
        while(right<=high && skill[i]>2 *skill[right]) right++;
        count+=(right-(mid+1));
    }
    return count;
}

void merge(vector<int>&skill,int low,int mid,int high)
{
    vector<int> temp;
    int left=low;
    int right=mid+1;
    while(left<=mid && right<=high)
    {
        if(skill[left]<=skill[right])
        {
            temp.push_back(skill[left]);
            left++;
        }
        else
        {
            temp.push_back(skill[right]);
            right++;
        }
    }
    while(left<=mid)
    {
        temp.push_back(skill[left]);
        left++;
    }
    while(right<=high)
    {
        temp.push_back(skill[right]);
        right++;
    }

    for(int i=low; i<=high;i++)
    {
        skill[i]=temp[i-low];
    }
}


int mergeSort(vector<int> &skill,int low,int high)
{
    int count=0;
    if(low>=high) return count;
    int mid=(low+high)/2;
    count+=mergeSort(skill, low, mid);
    count+=mergeSort(skill,mid+1,high);

    //check function 
    count+= countPairs(skill,low,mid,high);
    merge(skill,low,mid,high);
    return count;
}

int team(vector <int> & skill, int n)
{
    // Write your code here.
    return mergeSort(skill,0,n-1);
}
