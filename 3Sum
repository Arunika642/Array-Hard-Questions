optimal approach- class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        int sum=0;
        for(int i=0; i<nums.size();i++)
        {
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j = i+1;
            int k = nums.size()-1;

            while(j<k)
            {
                sum = nums[i]+nums[j]+nums[k];
                if(sum<0)
                {
                    j++;
                }
                else if(sum>0)
                {
                    k--;
                }
                else  //sum==0
                {
                    vector<int> temp = {nums[i],nums[j],nums[k]}; //no need to sort now
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
        }
        return ans;
    }
};


another approach using hashing
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> st;  //to store the unique triplets
        for(int i=0; i<nums.size();i++)
        {
            set<int> hashSet;   //initialized here so that everytime i's value is changed new set is created, this set is created to store unique value of j
            for(int j=i+1;j<nums.size();j++)
            {
                hashSet.insert(j);
                int k = -(nums[i]+nums[j]);
                if(hashSet.find(k)!=hashSet.end())
                {
                    vector<int> temp = {nums[i],nums[j],k};
                    sort(temp.begin(),temp.end());
                    st.insert(temp); 
                }
                hashSet.insert(nums[j]);
            }
        }
        vector<vector<int>> ans(st.begin(),st.end());  //to store all triplets present in the st set
        return ans;
    }
};

