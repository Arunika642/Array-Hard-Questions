better approach
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        map<int,int> mpp;
        vector<int> temp;
        for(int i=0; i<nums.size();i++)
        {
            mpp[nums[i]]++;
        }
        for(auto it:mpp)
        {
            if(it.second>nums.size()/3)
            {
                temp.push_back(it.first);
            }
        }
        return temp;
        }
};

optimal approach:
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int count1=0,count2=0;
        int el1=INT_MIN,el2=INT_MIN;
        for(int i=0; i<nums.size();i++)
        {
            if(count1==0 && nums[i]!=el2)
            {
                count1=1;
                el1=nums[i];
            }
            else if(count2==0 && nums[i]!=el1)
            {
                count2=1;
                el2=nums[i];
            }
            else if(el1==nums[i])
            {
                count1++;
            }
            else if(el2==nums[i])
            {
                count2++;
            }
            else
            {
                count1--;
                count2--;
            }
        }

        //checking the elements
        int mini =(int)(nums.size()/3) + 1;
        int c1=0,c2=0;
        for(int i=0; i<nums.size();i++)
        {
            if(nums[i]==el1) c1++;
            else if(nums[i]==el2) c2++;
        }
        if(c1>=mini) ans.push_back(el1);
        if(c2>=mini) ans.push_back(el2);
        return ans;
        }
};
