Better Solution - TC- O(N)+O(N)
SC- O(N)

#include<bits/stdc++.h>

vector<int> findMissingRepeatingNumbers(vector < int > a) {
    // Write your code here
    int hash[a.size() + 1] = {0};

    for(int i=0; i<a.size();i++)
    {
        hash[a[i]]++;
    }
    int repeating = -1, missing = -1;

    for(int i=1; i<=a.size();i++)

    {
        if(hash[i]==2)
        {
            repeating = i;
        }
        else if(hash[i]==0)
        {
            missing = i;
        }

        if(repeating!=-1 && missing!=-1) break;

    }
    return {repeating,missing};
}


optimal 1- mathematics approach TC-O(N) and SC- O(1)

#include<bits/stdc++.h>

vector<int> findMissingRepeatingNumbers(vector < int > a) {
    // Write your code here
    long long n=a.size();
    long long val1,val2;
    long long s1=0,s2=0;
    long long s1n = (n*(n+1))/2;
    long long s2n = (n*(n+1)*(2*n+1))/6;

    for(int i=0; i<n;i++)
    {
        s1+=a[i];
        s2+= (long long)a[i]*(long long)a[i];
    }
    val1 = s1-s1n;  //x-y
    val2= s2-s2n;
    val2= val2/val1; //x+y

    long long x = (val1+val2)/2;
    long long y = val2 - x;

    return {x,y};
}
